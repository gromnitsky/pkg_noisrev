#!/usr/bin/env ruby
# -*-ruby-*-

require 'thread'
require 'logger'

require_relative '../lib/pkg_noisrev/trestle.rb'
require_relative '../lib/pkg_noisrev/fbsdpackage.rb'

include Pkg_noisrev

$conf = Hash.new
u = Trestle.new($conf)

$conf[:banner] = "Usage: #{File.basename($0)} [options]"
$conf[:pkg_dir] = '/var/db/pkg'
$conf[:ports_dir] = '/usr/ports'
$conf[:log] = '/tmp/' + Pkg_noisrev::Meta::NAME  + '.log'
$conf[:filter] = '' # or 'outofsync', 'missing'
$conf[:mode] = 'default' # or 'likeportmaster'
$conf[:int_attempts] = 2

# --[ main ]------------------------------------------------------------

u.config_parse(['foobar']) {|src|
  o = u.cl_parse(src) # create an OptionParser object
  o.on('--pkg-dir STR', 'Set the alternate package db directory.') {|i|
    $conf[:pkg_dir] = i
  }
  o.on('--ports-dir STR', 'Set the alternate ports db directory.') {|i|
    $conf[:ports_dir] = i
  }
  o.on('--outofsync', 'Filter all but out of sync packages.') {|i|
    $conf[:filter] = 'outofsync'
  }
  o.on('--missing', 'Filter all but packages that doesn\'t exists in ports.') {|i|
    $conf[:filter] = 'missing'
  }
  o.on('--likeportmaster', 'Print like (but not quite) "portmaster -L".') {|i|
    $conf[:mode] = 'likeportmaster'
  }
  u.cl_parse(src, o) # run cl parser
}

# print our env
if $conf[:verbose] >= 2
  puts 'Libs dir: ' + Trestle.gem_libdir
  pp $conf
end

File.delete $conf[:log] rescue nil
log = Logger.new($conf[:log])
log.formatter = proc { |severity, d, p, msg| "#{severity}: #{msg}\n" }

Signal.trap(:INT) do
  if $conf[:int_attempts] >= 0
    print "\nWoot! (#{$conf[:int_attempts]})\n"
  else
    print "\n"
  end
  $conf[:int_attempts] == -1 ? exit(1) : $conf[:int_attempts] -= 1
end

begin
  pkg = FbsdPackage.new $conf[:pkg_dir], $conf[:ports_dir]
rescue
  Trestle.errx 1, $!.to_s
end
pkg.analyze log
pkg.print $conf[:mode], $conf[:filter]
